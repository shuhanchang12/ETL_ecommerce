-- Step 3: Automate table updates with streams and tasks

-- Create stream on events table
CREATE OR REPLACE STREAM RETAIL_LAB.RAW.ORDER_STATUS_EVENTS_STREAM 
ON TABLE RETAIL_LAB.RAW.ORDER_STATUS_EVENTS;

-- Create target table for processed events
CREATE OR REPLACE TABLE RETAIL_LAB.DWH.ORDER_STATUS_PROCESSED (
    ORDER_ID NUMBER,
    CUSTOMER_ID NUMBER,
    CURRENT_STATUS STRING,
    PREVIOUS_STATUS STRING,
    LAST_UPDATE_TS TIMESTAMP_NTZ,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create task to process new events
CREATE OR REPLACE TASK RETAIL_LAB.RAW.PROCESS_ORDER_EVENTS
    WAREHOUSE = TEACH_WH
    SCHEDULE = '1 minute'
    WHEN SYSTEM$STREAM_HAS_DATA('RETAIL_LAB.RAW.ORDER_STATUS_EVENTS_STREAM')
AS
    MERGE INTO RETAIL_LAB.DWH.ORDER_STATUS_PROCESSED AS T
    USING (
        SELECT 
            ORDER_ID,
            CUSTOMER_ID,
            NEW_STATUS,
            STATUS_TS,
            ROW_NUMBER() OVER (
                PARTITION BY ORDER_ID 
                ORDER BY STATUS_TS DESC
            ) AS RN
        FROM RETAIL_LAB.RAW.ORDER_STATUS_EVENTS_STREAM
    ) AS S
    ON T.ORDER_ID = S.ORDER_ID
    WHEN MATCHED AND S.RN = 1 THEN
        UPDATE SET
            T.PREVIOUS_STATUS = T.CURRENT_STATUS,
            T.CURRENT_STATUS = S.NEW_STATUS,
            T.LAST_UPDATE_TS = S.STATUS_TS
    WHEN NOT MATCHED AND S.RN = 1 THEN
        INSERT (ORDER_ID, CUSTOMER_ID, CURRENT_STATUS, LAST_UPDATE_TS)
        VALUES (S.ORDER_ID, S.CUSTOMER_ID, S.NEW_STATUS, S.STATUS_TS);

-- Resume the task
ALTER TASK RETAIL_LAB.RAW.PROCESS_ORDER_EVENTS RESUME;

-- Create monitoring view
CREATE OR REPLACE VIEW RETAIL_LAB.DWH.ORDER_MONITORING AS
SELECT 
    CURRENT_STATUS,
    COUNT(*) as ORDER_COUNT,
    COUNT(DISTINCT CUSTOMER_ID) as UNIQUE_CUSTOMERS,
    MIN(LAST_UPDATE_TS) as EARLIEST_UPDATE,
    MAX(LAST_UPDATE_TS) as LATEST_UPDATE
FROM RETAIL_LAB.DWH.ORDER_STATUS_PROCESSED
GROUP BY CURRENT_STATUS
ORDER BY ORDER_COUNT DESC;

-- Create analytics tables for monitoring
CREATE OR REPLACE TABLE RETAIL_LAB.DWH.DAILY_ORDER_ANALYTICS AS
SELECT 
    DATE(LAST_UPDATE_TS) as ORDER_DATE,
    CURRENT_STATUS,
    COUNT(*) as ORDER_COUNT,
    COUNT(DISTINCT CUSTOMER_ID) as UNIQUE_CUSTOMERS
FROM RETAIL_LAB.DWH.ORDER_STATUS_PROCESSED
WHERE LAST_UPDATE_TS >= CURRENT_DATE - 30
GROUP BY DATE(LAST_UPDATE_TS), CURRENT_STATUS
ORDER BY ORDER_DATE, CURRENT_STATUS;

-- Create customer analytics table
CREATE OR REPLACE TABLE RETAIL_LAB.DWH.CUSTOMER_ANALYTICS AS
SELECT 
    CUSTOMER_ID,
    COUNT(*) as TOTAL_ORDERS,
    COUNT(DISTINCT CURRENT_STATUS) as STATUS_TYPES,
    MIN(LAST_UPDATE_TS) as FIRST_ORDER_DATE,
    MAX(LAST_UPDATE_TS) as LAST_ORDER_DATE,
    MAX(CASE WHEN CURRENT_STATUS = 'DELIVERED' THEN 1 ELSE 0 END) as HAS_DELIVERED_ORDERS
FROM RETAIL_LAB.DWH.ORDER_STATUS_PROCESSED
GROUP BY CUSTOMER_ID
ORDER BY TOTAL_ORDERS DESC;
